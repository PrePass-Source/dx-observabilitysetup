networks:
  monitoring:
    name: monitoring-network
    driver: bridge
  database:
    name: database-network
    driver: bridge

services:
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./loki/local-config.yaml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    labels:
      - "com.docker.compose.project=observability"
      - "com.docker.compose.service=loki"

  mimir:
    image: grafana/mimir:latest
    ports:
      - "9009:9009"    # Mimir HTTP API
      - "9095:9095"    # Mimir gRPC API
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    volumes:
      - ./mimir/mimir.yaml:/etc/mimir/mimir.yaml:ro
      - mimir-data:/data
    command: -config.file=/etc/mimir/mimir.yaml
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9009/ready"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    labels:
      - "com.docker.compose.project=observability"
      - "com.docker.compose.service=mimir"

  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/log:/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./promtail/config.yml:/etc/promtail/config.yml:ro
      - promtail-positions:/tmp
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring
    depends_on:
      loki:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    labels:
      - "com.docker.compose.project=observability"
      - "com.docker.compose.service=promtail"

  grafana:
    image: grafana/grafana:latest
    user: "472:472"
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards,traces,explore,correlations,dataConnections,queryLibrary,alerting,unifiedAlerting
    ports:
      - "3000:3000"
    networks:
      - monitoring
    depends_on:
      loki:
        condition: service_healthy
      mimir:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    labels:
      - "com.docker.compose.project=observability"
      - "com.docker.compose.service=grafana"

  tempo:
    image: grafana/tempo:latest
    environment:
      TEMPO_TARGET: otelcol
    command: -config.file=/etc/tempo/tempo.yaml
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo/tempo.yaml:ro
      - tempo-data:/var/tempo
    ports:
      - "3200:3200"    # Tempo HTTP API
      - "14268:14268"  # Jaeger HTTP
      - "6831:6831/udp" # Jaeger UDP
      - "9411:9411"    # Zipkin
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3200/ready"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    labels:
      - "com.docker.compose.project=observability"
      - "com.docker.compose.service=tempo"

  db:
    container_name: mssql-server
    image: mcr.microsoft.com/mssql/server:2022-latest
    cap_add: [ 'SYS_PTRACE' ]
    ports:
      - "1433:1433"
    restart: always
    volumes: 
      - mssql-data:/var/opt/mssql
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    environment:
      - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD:-YourStrong@Passw0rd}
      - ACCEPT_EULA=Y
      - MSSQL_PID=Developer
      - MSSQL_MEMORY_LIMIT_MB=1024
      - MSSQL_AGENT_ENABLED=true
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${MSSQL_SA_PASSWORD:-YourStrong@Passw0rd}" -Q "SELECT 1" || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    labels:
      - "com.docker.compose.project=observability"
      - "com.docker.compose.service=db"

volumes:
  grafana-data:
    name: grafana-data
  mssql-data:
    name: mssql-data
  loki-data:
    name: loki-data
  mimir-data:
    name: mimir-data
  promtail-positions:
    name: promtail-positions
  tempo-data:
    name: tempo-data